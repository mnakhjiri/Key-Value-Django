# Create .env from .env.dev
# change init.sql based on the password of user

services:
  db:
    image: mysql:8.0
    ports:
      - '3306:3306'
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -p${MYSQL_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - './mysql-quera:/var/lib/mysql'
      - './docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/'
      - .:/app
      - /backup
    command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--skip-log-bin' ]

  web.wsgi:
    build:
      context: .
    image: "backend"
    container_name: "web.wsgi"

    command:
      sh -c "mkdir -p /app/run &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput && 
      python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - ./static/:/app/static/
      - run_data:/app/run/
      - log_data:/var/log/
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
          condition: service_healthy
    expose:
      - "8000"
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    depends_on:
      - web.wsgi
    volumes:
      - ./static/:/app/static/
      - run_data:/app/run/
      - cert_data:/data/certs/
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    ports:
      - "8081:8081"
      - "8443:8443"

volumes:
  run_data:
  log_data:
  cert_data:
